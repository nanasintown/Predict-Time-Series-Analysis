X[,perm_var] <- sample(X[,perm_var])
#X[,perm_var] <- sample(X[, perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix, Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
var_names <- colnames(hald[0:3])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,-4], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
#---------------
# Test remove CHEM 3
var_names <- colnames(hald[0:2])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[0:2], Intercept)
X <- cbind(hald.matrix[0:3], Intercept)
X <- cbind(hald.matrix[1], Intercept)
X <- cbind(hald.matrix, Intercept)
X <- cbind(hald.matrix[,2], Intercept)
X <- cbind(hald.matrix[1,2], Intercept)
X <- cbind(hald.matrix[,-3-4], Intercept)
X <- cbind(hald.matrix[,-3], Intercept)
X <- cbind(hald.matrix[:2], Intercept)
X <- cbind(hald.matrix[0:2], Intercept)
X <- cbind(hald.matrix[,0:2], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
#--------------
#Test removing chem1, CHEM 2
var_names <- c('CHEM3','CHEM4')
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,3:4], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
#------------------------
# Test remove chem1
var_names <- c('CHEM2','CHEM3','CHEM4')
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,-1], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
# 2.4
# a
wheat <- read.table("crop.txt", header=T,sep="\t")
crop_data <- read.model("crop.txt", header='T', sep='t')
crop_data <- read.table("crop.txt", header='T', sep='t')
# 2.4
crop_data <- read.table("crop.txt", header='T', sep='\t')
crop_data <- read.table("crop.txt", header='T', sep='\t')
crop_data <- read.table("crop.txt", header=T, sep='\t')
crop_lm <- lm(Yield~Feritlizer)
crop_lm <- lm(Yield~Feritlizer)
crop_data <- read.table("crop.txt", header=T, sep='\t')
crop_lm <- lm(Yield~Feritlizer)
crop_lm <- lm(Yield~Feritlizer)
crop_lm <- lm(Yield~Feritlizer, data=crop_data)
crop_lm <- lm(Yield~Fertilizer, data=crop_data)
summary(crop_lm)
set.seed(123)
# 2.3
library(car)
hald <- read.table("hald.txt",header=T,sep="\t")
hald.matrix <- as.matrix(hald[0:4])
fullmodel=lm(HEAT~CHEM1+CHEM2+CHEM3+CHEM4,data=hald)
summary(fullmodel)
set.seed(123)
r_squared_og <- summary(fullmodel)$r.squared
r_squared_og
# Test full model
var_names <- colnames(hald[0:4])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix, Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
# -------------
# permutation test for model without chem4
set.seed(123)
model_1 <- lm(HEAT~CHEM1+CHEM2+CHEM3,data=hald)
summary(model_1)
var_names <- colnames(hald[0:3])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,-4], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
set.seed(123)
model_2 <- lm(HEAT~CHEM1+CHEM2,data=hald)
summary(model_2)
var_names <- colnames(hald[0:2])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,0:2], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
crop_data <- read.table("crop.txt", header=T, sep='\t')
set.seed(123)
# a
crop_lm <- lm(Yield~Fertilizer, data=crop_data)
summary(crop_lm)
View(crop_lm)
View(crop_data)
FIT <- fitted(crop_data)
FIT <- fitted(crop_lm)
RES <- resid(crop_lm)
plot(crop_data$Yield,FIT, ylab="Fits",xlab="Yield",pch=16)
#plot()
plot(FIT,RES, xlab="Fits",ylab="Residuals",pch=16)
abline(a=0,b=0,col="grey",lwd=1)
plot(fitted(crop_lm), resid(crop_lm))
#plot()
plot(FIT,RES, xlab="Fits",ylab="Residuals",pch=16)
abline(a=0,b=0,col="grey",lwd=1)
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/homework2.4.R", echo=TRUE)
crop_lm2 <- lm(Yield~Fertilizer+LSqrd, data=crop_data)
summary(crop_lm2)
?plot
plot(curve(31.0812*x + (-2.4611)*x^2, 0, 10), crop_data$Yield)
plot(crop_data$Yield, curve(31.0812*x + (-2.4611)*x^2, 0, 10))
plot(crop_data$Yield, curve(31.0812*x + (-2.4611)*x^2, 0, 33))
plot(crop_data$Yield, curve(31.0812*x + (-2.4611)*x^2, 0, 10))
plot(crop_data$Yield, curve(31.0812*x + (-2.4611)*x^2, 0, 10), ylab="Yield")
plot(crop_data$Yield, curve(31.0812*x + (-2.4611)*x^2, 0, 10), ylab="Yield")
plot(curve(31.0812*x + (-2.4611)*x^2, 0, 10), crop_data$Yield, ylab="Yield")
plot(curve(31.0812*x + (-2.4611)*x^2, 0, 10), crop_data$Yield, ylab="Yield")
curve(31.0812*x + (-2.4611)*x^2, 0, 10)
plot(curve(expl_var, crop_data$Yield, ylab="Yield")
plot(expl_var, crop_data$Yield, ylab="Yield")
expl_var <- curve(31.0812*x + (-2.4611)*x^2, 0, 10)
plot(expl_var, crop_data$Yield, ylab="Yield")
?curve
expl_var <- curve(31.0812*x + (-2.4611)*x^2)
plot(expl_var, crop_data$Yield, ylab="Yield")
plot(curve(31.0812*x + (-2.4611)*x^2), crop_data$Yield, ylab="Yield")
View(crop_data)
plot(curve(31.0812*x + (-2.4611)*x^2), crop_data[,3], ylab="Yield")
plot( crop_data[,3], curve(31.0812*x + (-2.4611)*x^2),, ylab="Yield")
plot(crop_data[,3], curve(31.0812*x + (-2.4611)*x^2), ylab="Yield")
plot(crop_data[,3], crop_data[,0:2], ylab="Yield")
plot(crop_data[,3], expl_var, ylab="Yield")
expl_var <- (31.0812*x + (-2.4611)*x^2)
x <- crop_data$Fertilizer
expl_var <- (31.0812*x + (-2.4611)*x^2)
curve(expl_var, crop_data[,3] , ylab="Yield")
curve((31.0812*x + (-2.4611)*x^2), crop_data[,3] , ylab="Yield")
curve((31.0812*x + (-2.4611)*x^2), crop_data$Yield , ylab="Yield")
curve((31.0812*x + (-2.4611)*x^2), crop_data$Yield, from=0, to=10 , ylab="Yield")
curve((31.0812*x + (-2.4611)*x^2), crop_data$Yield , ylab="Yield")
?curve
x <- crop_data$Fertilizer # x^2 = LSqrd
beta_1 <- 31.0812
beta_2 <- -2.4611
curve((beta_1*x + beta_2*x^2), crop_data$Yield , ylab="Yield")
# a
crop_lm <- lm(Yield~Fertilizer, data=crop_data)
summary(crop_lm)
crop_lm2 <- lm(Yield~Fertilizer+LSqrd, data=crop_data)
summary(crop_lm2)
FIT <- fitted(crop_lm)
RES <- resid(crop_lm)
plot(crop_data$Yield,FIT, ylab="Fits",xlab="Yield",pch=16)
plot(FIT,RES, xlab="Fits",ylab="Residuals",pch=16)
abline(a=0,b=0,col="grey",lwd=1)
abline(crop_lm)
plot(crop_data$Yield,FIT, ylab="Fits",xlab="Yield",pch=16)
abline(crop_lm)
abline(crop_lm, col="red")
crop_lm2 <- lm(Yield~Fertilizer+LSqrd, data=crop_data)
summary(crop_lm2)
const_term <- 193.3100
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield , ylab="Yield")
View(crop_lm2)
View(crop_lm)
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield,from=0, to=10, ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, 0, 10, ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield,xlim=10, ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, xlim=[0,10], ylab="Yield")
?curve
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, xlim=c(0,10), ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, xlim=(0,10), ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, xlim=[0,10], ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield,from=0, xlim=10, ylab="Yield")
plot(crop_lm2)
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/Week_2_Demo_Kaivola.r", echo=TRUE)
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/homework2.4.R", echo=TRUE)
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer",ylab="Yield",pch=16)
abline(crop_lm2)
curve((const_term + beta_1*x + beta_2*x^2), crop_data$Yield, from=0, to=10, ylab="Yield")
?curve
abline(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab="Yield"))
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer",ylab="Yield")
abline(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab="Yield"))
plot(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10), crop_data$Yield, xlab="Fertilizer",ylab="Yield")
# b
set.seed(123)
crop_lm2 <- lm(Yield~Fertilizer+LSqrd, data=crop_data)
summary(crop_lm2)
x <- crop_data$Fertilizer # x^2 = LSqrd
beta_1 <- 31.0812
beta_2 <- -2.4611
const_term <- 193.3100
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
abline(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab="Yield"))
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
abline(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10))
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
lines(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10))
lines(curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield'))
curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd")
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd")
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/homework2.4.R", echo=TRUE)
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield", add=TRUE)
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
lines((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd")
abline((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd")
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/homework2.4.R", echo=TRUE)
curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd", add=TRUE)
plot(crop_data$Fertilizer, crop_data$Yield, xlab="Fertilizer + LSqrd",ylab="Yield")
curve((const_term + beta_1*x + beta_2*x^2), from=0, to=10, ylab='Yield', xlab="Fertilizer + LSqrd", add=TRUE)
plot(crop_data$Yield,FIT, ylab="Fits",xlab="Yield",pch=16)
abline(crop_data$Fertilizer, col='blue')
abline(crop_data$Fertilizer, col='blue')
abline(crop_lm, col='blue')
plot(crop_data$Yield,FIT, ylab="Fits",xlab="Yield",pch=16)
abline(crop_lm, col='blue')
plot(FIT,RES, xlab="Fits",ylab="Residuals",pch=16)
abline(a=0,b=0,col="grey",lwd=1)
source("~/Aalto Courses/MS-C2128/Week 2/Computer exercises 2-20211110/homework2.4.R", echo=TRUE)
plot(crop_data$Fertilizer,crop_data$Yield, ylab="Yield",xlab="Fertilizer",pch=16)
abline(crop_lm)
hald <- read.table("hald.txt",header=T,sep="\t")
hald.matrix <- as.matrix(hald[0:4])
fullmodel=lm(HEAT~CHEM1+CHEM2+CHEM3+CHEM4,data=hald)
summary(fullmodel)
set.seed(123)
r_squared_og <- summary(fullmodel)$r.squared
r_squared_og
# Test full model
var_names <- colnames(hald[0:4])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix, Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
# -------------
# Test remove CHEM3
# permutation test for model without chem3 as this variable is the most insignificant
set.seed(123)
model_1 <- lm(HEAT~CHEM1+CHEM2+CHEM4,data=hald)
summary(model_1)
var_names <- c("CHEM1",'CHEM2','CHEM4')
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,-3], Intercept)
View(X)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
set.seed(123)
model_2 <- lm(HEAT~CHEM1+CHEM2,data=hald)
summary(model_2)
var_names <- colnames(hald[0:2])
fit_helper_d <- function(X, y, perm_var) {
# Permute the values of perm_var
X[,perm_var] <- sample(X[,perm_var])
# LS estimate
beta <- solve((t(X) %*% X)) %*% t(X) %*% y
# Fitted values
y_hat <- X %*% beta
# R^2
cor(y_hat, y)^2
}
perm_replicator_d <- function(n_perm, X, y, var_name) {
# Generate n_perm permutation estimates of R^2 for var_name
replicate(n_perm,  fit_helper_d(X, y, var_name))
}
# Sanity check
n <- nrow(hald)
Intercept <- rep(1, n)
X <- cbind(hald.matrix[,0:2], Intercept)
y <- hald$HEAT
n_perm <- 2000
alpha <- 0.05
expl_var <- var_names[]
# Compute the permutation estimates for each expl. variable individually
r_squares <- sapply(expl_var, function(name) perm_replicator_d(n_perm, X, y, name))
p_values_perm <- apply(r_squares, 2, function(x) sum(x > r_squared_og)/length(x))
p_values_perm # Not exactly the same as in the model solutions since here things are done in a different order.
p_values_perm < alpha
